// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mars {
namespace stn {
class MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message> {
} _Message_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, conversation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, from_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, server_timestamp_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Message_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::mars::stn::protobuf_conversation_2eproto::InitDefaults();
  ::mars::stn::protobuf_message_5fcontent_2eproto::InitDefaults();
  _Message_default_instance_.DefaultConstruct();
  _Message_default_instance_.get_mutable()->conversation_ = const_cast< ::mars::stn::Conversation*>(
      ::mars::stn::Conversation::internal_default_instance());
  _Message_default_instance_.get_mutable()->content_ = const_cast< ::mars::stn::MessageContent*>(
      ::mars::stn::MessageContent::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\022\010mars.stn\032\022conversation."
      "proto\032\025message_content.proto\"\243\001\n\007Message"
      "\022,\n\014conversation\030\001 \001(\0132\026.mars.stn.Conver"
      "sation\022\021\n\tfrom_user\030\002 \001(\t\022)\n\007content\030\003 \001"
      "(\0132\030.mars.stn.MessageContent\022\022\n\nmessage_"
      "id\030\004 \001(\003\022\030\n\020server_timestamp\030\005 \001(\003B)\n\024wi"
      "n.liyufan.im.protoB\021MessageOuterClassb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::mars::stn::protobuf_conversation_2eproto::AddDescriptors();
  ::mars::stn::protobuf_message_5fcontent_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kConversationFieldNumber;
const int Message::kFromUserFieldNumber;
const int Message::kContentFieldNumber;
const int Message::kMessageIdFieldNumber;
const int Message::kServerTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mars.stn.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_user().size() > 0) {
    from_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_user_);
  }
  if (from.has_conversation()) {
    conversation_ = new ::mars::stn::Conversation(*from.conversation_);
  } else {
    conversation_ = NULL;
  }
  if (from.has_content()) {
    content_ = new ::mars::stn::MessageContent(*from.content_);
  } else {
    content_ = NULL;
  }
  ::memcpy(&message_id_, &from.message_id_,
    reinterpret_cast<char*>(&server_timestamp_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(server_timestamp_));
  // @@protoc_insertion_point(copy_constructor:mars.stn.Message)
}

void Message::SharedCtor() {
  from_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conversation_, 0, reinterpret_cast<char*>(&server_timestamp_) -
    reinterpret_cast<char*>(&conversation_) + sizeof(server_timestamp_));
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:mars.stn.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  from_user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete conversation_;
  }
  if (this != internal_default_instance()) {
    delete content_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:mars.stn.Message)
  from_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && conversation_ != NULL) {
    delete conversation_;
  }
  conversation_ = NULL;
  if (GetArenaNoVirtual() == NULL && content_ != NULL) {
    delete content_;
  }
  content_ = NULL;
  ::memset(&message_id_, 0, reinterpret_cast<char*>(&server_timestamp_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(server_timestamp_));
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mars.stn.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mars.stn.Conversation conversation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conversation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_user().data(), this->from_user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mars.stn.Message.from_user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mars.stn.MessageContent content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 message_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 server_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mars.stn.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mars.stn.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mars.stn.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mars.stn.Conversation conversation = 1;
  if (this->has_conversation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conversation_, output);
  }

  // string from_user = 2;
  if (this->from_user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_user().data(), this->from_user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mars.stn.Message.from_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_user(), output);
  }

  // .mars.stn.MessageContent content = 3;
  if (this->has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->content_, output);
  }

  // int64 message_id = 4;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->message_id(), output);
  }

  // int64 server_timestamp = 5;
  if (this->server_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->server_timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:mars.stn.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mars.stn.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mars.stn.Conversation conversation = 1;
  if (this->has_conversation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conversation_, deterministic, target);
  }

  // string from_user = 2;
  if (this->from_user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_user().data(), this->from_user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mars.stn.Message.from_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_user(), target);
  }

  // .mars.stn.MessageContent content = 3;
  if (this->has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->content_, deterministic, target);
  }

  // int64 message_id = 4;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->message_id(), target);
  }

  // int64 server_timestamp = 5;
  if (this->server_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->server_timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mars.stn.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mars.stn.Message)
  size_t total_size = 0;

  // string from_user = 2;
  if (this->from_user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_user());
  }

  // .mars.stn.Conversation conversation = 1;
  if (this->has_conversation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conversation_);
  }

  // .mars.stn.MessageContent content = 3;
  if (this->has_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->content_);
  }

  // int64 message_id = 4;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  // int64 server_timestamp = 5;
  if (this->server_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->server_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mars.stn.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mars.stn.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mars.stn.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mars.stn.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_user().size() > 0) {

    from_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_user_);
  }
  if (from.has_conversation()) {
    mutable_conversation()->::mars::stn::Conversation::MergeFrom(from.conversation());
  }
  if (from.has_content()) {
    mutable_content()->::mars::stn::MessageContent::MergeFrom(from.content());
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.server_timestamp() != 0) {
    set_server_timestamp(from.server_timestamp());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mars.stn.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mars.stn.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  from_user_.Swap(&other->from_user_);
  std::swap(conversation_, other->conversation_);
  std::swap(content_, other->content_);
  std::swap(message_id_, other->message_id_);
  std::swap(server_timestamp_, other->server_timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// .mars.stn.Conversation conversation = 1;
bool Message::has_conversation() const {
  return this != internal_default_instance() && conversation_ != NULL;
}
void Message::clear_conversation() {
  if (GetArenaNoVirtual() == NULL && conversation_ != NULL) delete conversation_;
  conversation_ = NULL;
}
const ::mars::stn::Conversation& Message::conversation() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.conversation)
  return conversation_ != NULL ? *conversation_
                         : *::mars::stn::Conversation::internal_default_instance();
}
::mars::stn::Conversation* Message::mutable_conversation() {
  
  if (conversation_ == NULL) {
    conversation_ = new ::mars::stn::Conversation;
  }
  // @@protoc_insertion_point(field_mutable:mars.stn.Message.conversation)
  return conversation_;
}
::mars::stn::Conversation* Message::release_conversation() {
  // @@protoc_insertion_point(field_release:mars.stn.Message.conversation)
  
  ::mars::stn::Conversation* temp = conversation_;
  conversation_ = NULL;
  return temp;
}
void Message::set_allocated_conversation(::mars::stn::Conversation* conversation) {
  delete conversation_;
  conversation_ = conversation;
  if (conversation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Message.conversation)
}

// string from_user = 2;
void Message::clear_from_user() {
  from_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Message::from_user() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.from_user)
  return from_user_.GetNoArena();
}
void Message::set_from_user(const ::std::string& value) {
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.Message.from_user)
}
#if LANG_CXX11
void Message::set_from_user(::std::string&& value) {
  
  from_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.Message.from_user)
}
#endif
void Message::set_from_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.Message.from_user)
}
void Message::set_from_user(const char* value, size_t size) {
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.Message.from_user)
}
::std::string* Message::mutable_from_user() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.Message.from_user)
  return from_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_from_user() {
  // @@protoc_insertion_point(field_release:mars.stn.Message.from_user)
  
  return from_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_from_user(::std::string* from_user) {
  if (from_user != NULL) {
    
  } else {
    
  }
  from_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_user);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Message.from_user)
}

// .mars.stn.MessageContent content = 3;
bool Message::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
void Message::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;
}
const ::mars::stn::MessageContent& Message::content() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.content)
  return content_ != NULL ? *content_
                         : *::mars::stn::MessageContent::internal_default_instance();
}
::mars::stn::MessageContent* Message::mutable_content() {
  
  if (content_ == NULL) {
    content_ = new ::mars::stn::MessageContent;
  }
  // @@protoc_insertion_point(field_mutable:mars.stn.Message.content)
  return content_;
}
::mars::stn::MessageContent* Message::release_content() {
  // @@protoc_insertion_point(field_release:mars.stn.Message.content)
  
  ::mars::stn::MessageContent* temp = content_;
  content_ = NULL;
  return temp;
}
void Message::set_allocated_content(::mars::stn::MessageContent* content) {
  delete content_;
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Message.content)
}

// int64 message_id = 4;
void Message::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Message::message_id() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.message_id)
  return message_id_;
}
void Message::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.Message.message_id)
}

// int64 server_timestamp = 5;
void Message::clear_server_timestamp() {
  server_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Message::server_timestamp() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.server_timestamp)
  return server_timestamp_;
}
void Message::set_server_timestamp(::google::protobuf::int64 value) {
  
  server_timestamp_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.Message.server_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace stn
}  // namespace mars

// @@protoc_insertion_point(global_scope)
