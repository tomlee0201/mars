// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "conversation.pb.h"
#include "message_content.pb.h"
// @@protoc_insertion_point(includes)
namespace mars {
namespace stn {
class Conversation;
class ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageContent;
class MessageContentDefaultTypeInternal;
extern MessageContentDefaultTypeInternal _MessageContent_default_instance_;
}  // namespace stn
}  // namespace mars

namespace mars {
namespace stn {

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mars.stn.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_user = 2;
  void clear_from_user();
  static const int kFromUserFieldNumber = 2;
  const ::std::string& from_user() const;
  void set_from_user(const ::std::string& value);
  #if LANG_CXX11
  void set_from_user(::std::string&& value);
  #endif
  void set_from_user(const char* value);
  void set_from_user(const char* value, size_t size);
  ::std::string* mutable_from_user();
  ::std::string* release_from_user();
  void set_allocated_from_user(::std::string* from_user);

  // .mars.stn.Conversation conversation = 1;
  bool has_conversation() const;
  void clear_conversation();
  static const int kConversationFieldNumber = 1;
  const ::mars::stn::Conversation& conversation() const;
  ::mars::stn::Conversation* mutable_conversation();
  ::mars::stn::Conversation* release_conversation();
  void set_allocated_conversation(::mars::stn::Conversation* conversation);

  // .mars.stn.MessageContent content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::mars::stn::MessageContent& content() const;
  ::mars::stn::MessageContent* mutable_content();
  ::mars::stn::MessageContent* release_content();
  void set_allocated_content(::mars::stn::MessageContent* content);

  // int64 message_id = 4;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 4;
  ::google::protobuf::int64 message_id() const;
  void set_message_id(::google::protobuf::int64 value);

  // int64 server_timestamp = 5;
  void clear_server_timestamp();
  static const int kServerTimestampFieldNumber = 5;
  ::google::protobuf::int64 server_timestamp() const;
  void set_server_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mars.stn.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_user_;
  ::mars::stn::Conversation* conversation_;
  ::mars::stn::MessageContent* content_;
  ::google::protobuf::int64 message_id_;
  ::google::protobuf::int64 server_timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// .mars.stn.Conversation conversation = 1;
inline bool Message::has_conversation() const {
  return this != internal_default_instance() && conversation_ != NULL;
}
inline void Message::clear_conversation() {
  if (GetArenaNoVirtual() == NULL && conversation_ != NULL) delete conversation_;
  conversation_ = NULL;
}
inline const ::mars::stn::Conversation& Message::conversation() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.conversation)
  return conversation_ != NULL ? *conversation_
                         : *::mars::stn::Conversation::internal_default_instance();
}
inline ::mars::stn::Conversation* Message::mutable_conversation() {
  
  if (conversation_ == NULL) {
    conversation_ = new ::mars::stn::Conversation;
  }
  // @@protoc_insertion_point(field_mutable:mars.stn.Message.conversation)
  return conversation_;
}
inline ::mars::stn::Conversation* Message::release_conversation() {
  // @@protoc_insertion_point(field_release:mars.stn.Message.conversation)
  
  ::mars::stn::Conversation* temp = conversation_;
  conversation_ = NULL;
  return temp;
}
inline void Message::set_allocated_conversation(::mars::stn::Conversation* conversation) {
  delete conversation_;
  conversation_ = conversation;
  if (conversation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Message.conversation)
}

// string from_user = 2;
inline void Message::clear_from_user() {
  from_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::from_user() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.from_user)
  return from_user_.GetNoArena();
}
inline void Message::set_from_user(const ::std::string& value) {
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.Message.from_user)
}
#if LANG_CXX11
inline void Message::set_from_user(::std::string&& value) {
  
  from_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.Message.from_user)
}
#endif
inline void Message::set_from_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.Message.from_user)
}
inline void Message::set_from_user(const char* value, size_t size) {
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.Message.from_user)
}
inline ::std::string* Message::mutable_from_user() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.Message.from_user)
  return from_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_from_user() {
  // @@protoc_insertion_point(field_release:mars.stn.Message.from_user)
  
  return from_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_from_user(::std::string* from_user) {
  if (from_user != NULL) {
    
  } else {
    
  }
  from_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_user);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Message.from_user)
}

// .mars.stn.MessageContent content = 3;
inline bool Message::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline void Message::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;
}
inline const ::mars::stn::MessageContent& Message::content() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.content)
  return content_ != NULL ? *content_
                         : *::mars::stn::MessageContent::internal_default_instance();
}
inline ::mars::stn::MessageContent* Message::mutable_content() {
  
  if (content_ == NULL) {
    content_ = new ::mars::stn::MessageContent;
  }
  // @@protoc_insertion_point(field_mutable:mars.stn.Message.content)
  return content_;
}
inline ::mars::stn::MessageContent* Message::release_content() {
  // @@protoc_insertion_point(field_release:mars.stn.Message.content)
  
  ::mars::stn::MessageContent* temp = content_;
  content_ = NULL;
  return temp;
}
inline void Message::set_allocated_content(::mars::stn::MessageContent* content) {
  delete content_;
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Message.content)
}

// int64 message_id = 4;
inline void Message::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Message::message_id() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.message_id)
  return message_id_;
}
inline void Message::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.Message.message_id)
}

// int64 server_timestamp = 5;
inline void Message::clear_server_timestamp() {
  server_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Message::server_timestamp() const {
  // @@protoc_insertion_point(field_get:mars.stn.Message.server_timestamp)
  return server_timestamp_;
}
inline void Message::set_server_timestamp(::google::protobuf::int64 value) {
  
  server_timestamp_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.Message.server_timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace stn
}  // namespace mars

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
