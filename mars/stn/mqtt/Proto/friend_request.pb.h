// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_request.proto

#ifndef PROTOBUF_friend_5frequest_2eproto__INCLUDED
#define PROTOBUF_friend_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace mars {
namespace stn {
class FriendRequest;
class FriendRequestDefaultTypeInternal;
extern FriendRequestDefaultTypeInternal _FriendRequest_default_instance_;
}  // namespace stn
}  // namespace mars

namespace mars {
namespace stn {

namespace protobuf_friend_5frequest_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_friend_5frequest_2eproto

enum RequestStatus {
  sent = 0,
  accepted = 1,
  rejected = 2,
  RequestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RequestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RequestStatus_IsValid(int value);
const RequestStatus RequestStatus_MIN = sent;
const RequestStatus RequestStatus_MAX = rejected;
const int RequestStatus_ARRAYSIZE = RequestStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestStatus_descriptor();
inline const ::std::string& RequestStatus_Name(RequestStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestStatus_descriptor(), value);
}
inline bool RequestStatus_Parse(
    const ::std::string& name, RequestStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestStatus>(
    RequestStatus_descriptor(), name, value);
}
// ===================================================================

class FriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mars.stn.FriendRequest) */ {
 public:
  FriendRequest();
  virtual ~FriendRequest();

  FriendRequest(const FriendRequest& from);

  inline FriendRequest& operator=(const FriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRequest& default_instance();

  static inline const FriendRequest* internal_default_instance() {
    return reinterpret_cast<const FriendRequest*>(
               &_FriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FriendRequest* other);

  // implements Message ----------------------------------------------

  inline FriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRequest& from);
  void MergeFrom(const FriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_uid = 1;
  void clear_from_uid();
  static const int kFromUidFieldNumber = 1;
  const ::std::string& from_uid() const;
  void set_from_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_from_uid(::std::string&& value);
  #endif
  void set_from_uid(const char* value);
  void set_from_uid(const char* value, size_t size);
  ::std::string* mutable_from_uid();
  ::std::string* release_from_uid();
  void set_allocated_from_uid(::std::string* from_uid);

  // string to_uid = 2;
  void clear_to_uid();
  static const int kToUidFieldNumber = 2;
  const ::std::string& to_uid() const;
  void set_to_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_to_uid(::std::string&& value);
  #endif
  void set_to_uid(const char* value);
  void set_to_uid(const char* value, size_t size);
  ::std::string* mutable_to_uid();
  ::std::string* release_to_uid();
  void set_allocated_to_uid(::std::string* to_uid);

  // string reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int64 update_dt = 5;
  void clear_update_dt();
  static const int kUpdateDtFieldNumber = 5;
  ::google::protobuf::int64 update_dt() const;
  void set_update_dt(::google::protobuf::int64 value);

  // .mars.stn.RequestStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::mars::stn::RequestStatus status() const;
  void set_status(::mars::stn::RequestStatus value);

  // bool from_read_status = 6;
  void clear_from_read_status();
  static const int kFromReadStatusFieldNumber = 6;
  bool from_read_status() const;
  void set_from_read_status(bool value);

  // bool to_read_status = 7;
  void clear_to_read_status();
  static const int kToReadStatusFieldNumber = 7;
  bool to_read_status() const;
  void set_to_read_status(bool value);

  // @@protoc_insertion_point(class_scope:mars.stn.FriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_uid_;
  ::google::protobuf::internal::ArenaStringPtr to_uid_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int64 update_dt_;
  int status_;
  bool from_read_status_;
  bool to_read_status_;
  mutable int _cached_size_;
  friend struct protobuf_friend_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRequest

// string from_uid = 1;
inline void FriendRequest::clear_from_uid() {
  from_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::from_uid() const {
  // @@protoc_insertion_point(field_get:mars.stn.FriendRequest.from_uid)
  return from_uid_.GetNoArena();
}
inline void FriendRequest::set_from_uid(const ::std::string& value) {
  
  from_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.FriendRequest.from_uid)
}
#if LANG_CXX11
inline void FriendRequest::set_from_uid(::std::string&& value) {
  
  from_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.FriendRequest.from_uid)
}
#endif
inline void FriendRequest::set_from_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.FriendRequest.from_uid)
}
inline void FriendRequest::set_from_uid(const char* value, size_t size) {
  
  from_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.FriendRequest.from_uid)
}
inline ::std::string* FriendRequest::mutable_from_uid() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.FriendRequest.from_uid)
  return from_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_from_uid() {
  // @@protoc_insertion_point(field_release:mars.stn.FriendRequest.from_uid)
  
  return from_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_from_uid(::std::string* from_uid) {
  if (from_uid != NULL) {
    
  } else {
    
  }
  from_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_uid);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.FriendRequest.from_uid)
}

// string to_uid = 2;
inline void FriendRequest::clear_to_uid() {
  to_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::to_uid() const {
  // @@protoc_insertion_point(field_get:mars.stn.FriendRequest.to_uid)
  return to_uid_.GetNoArena();
}
inline void FriendRequest::set_to_uid(const ::std::string& value) {
  
  to_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.FriendRequest.to_uid)
}
#if LANG_CXX11
inline void FriendRequest::set_to_uid(::std::string&& value) {
  
  to_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.FriendRequest.to_uid)
}
#endif
inline void FriendRequest::set_to_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.FriendRequest.to_uid)
}
inline void FriendRequest::set_to_uid(const char* value, size_t size) {
  
  to_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.FriendRequest.to_uid)
}
inline ::std::string* FriendRequest::mutable_to_uid() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.FriendRequest.to_uid)
  return to_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_to_uid() {
  // @@protoc_insertion_point(field_release:mars.stn.FriendRequest.to_uid)
  
  return to_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_to_uid(::std::string* to_uid) {
  if (to_uid != NULL) {
    
  } else {
    
  }
  to_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_uid);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.FriendRequest.to_uid)
}

// string reason = 3;
inline void FriendRequest::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::reason() const {
  // @@protoc_insertion_point(field_get:mars.stn.FriendRequest.reason)
  return reason_.GetNoArena();
}
inline void FriendRequest::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.FriendRequest.reason)
}
#if LANG_CXX11
inline void FriendRequest::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.FriendRequest.reason)
}
#endif
inline void FriendRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.FriendRequest.reason)
}
inline void FriendRequest::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.FriendRequest.reason)
}
inline ::std::string* FriendRequest::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.FriendRequest.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_reason() {
  // @@protoc_insertion_point(field_release:mars.stn.FriendRequest.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.FriendRequest.reason)
}

// .mars.stn.RequestStatus status = 4;
inline void FriendRequest::clear_status() {
  status_ = 0;
}
inline ::mars::stn::RequestStatus FriendRequest::status() const {
  // @@protoc_insertion_point(field_get:mars.stn.FriendRequest.status)
  return static_cast< ::mars::stn::RequestStatus >(status_);
}
inline void FriendRequest::set_status(::mars::stn::RequestStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.FriendRequest.status)
}

// int64 update_dt = 5;
inline void FriendRequest::clear_update_dt() {
  update_dt_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FriendRequest::update_dt() const {
  // @@protoc_insertion_point(field_get:mars.stn.FriendRequest.update_dt)
  return update_dt_;
}
inline void FriendRequest::set_update_dt(::google::protobuf::int64 value) {
  
  update_dt_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.FriendRequest.update_dt)
}

// bool from_read_status = 6;
inline void FriendRequest::clear_from_read_status() {
  from_read_status_ = false;
}
inline bool FriendRequest::from_read_status() const {
  // @@protoc_insertion_point(field_get:mars.stn.FriendRequest.from_read_status)
  return from_read_status_;
}
inline void FriendRequest::set_from_read_status(bool value) {
  
  from_read_status_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.FriendRequest.from_read_status)
}

// bool to_read_status = 7;
inline void FriendRequest::clear_to_read_status() {
  to_read_status_ = false;
}
inline bool FriendRequest::to_read_status() const {
  // @@protoc_insertion_point(field_get:mars.stn.FriendRequest.to_read_status)
  return to_read_status_;
}
inline void FriendRequest::set_to_read_status(bool value) {
  
  to_read_status_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.FriendRequest.to_read_status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace stn
}  // namespace mars

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mars::stn::RequestStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mars::stn::RequestStatus>() {
  return ::mars::stn::RequestStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_5frequest_2eproto__INCLUDED
