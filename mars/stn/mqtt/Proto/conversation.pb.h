// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conversation.proto

#ifndef PROTOBUF_conversation_2eproto__INCLUDED
#define PROTOBUF_conversation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace mars {
namespace stn {
class Conversation;
class ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
}  // namespace stn
}  // namespace mars

namespace mars {
namespace stn {

namespace protobuf_conversation_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_conversation_2eproto

enum ConversationType {
  ConversationType_Private = 0,
  ConversationType_Group = 1,
  ConversationType_System = 2,
  ConversationType_ChatRoom = 3,
  ConversationType_Command = 4,
  ConversationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConversationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConversationType_IsValid(int value);
const ConversationType ConversationType_MIN = ConversationType_Private;
const ConversationType ConversationType_MAX = ConversationType_Command;
const int ConversationType_ARRAYSIZE = ConversationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConversationType_descriptor();
inline const ::std::string& ConversationType_Name(ConversationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConversationType_descriptor(), value);
}
inline bool ConversationType_Parse(
    const ::std::string& name, ConversationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConversationType>(
    ConversationType_descriptor(), name, value);
}
// ===================================================================

class Conversation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mars.stn.Conversation) */ {
 public:
  Conversation();
  virtual ~Conversation();

  Conversation(const Conversation& from);

  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Conversation& default_instance();

  static inline const Conversation* internal_default_instance() {
    return reinterpret_cast<const Conversation*>(
               &_Conversation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Conversation* other);

  // implements Message ----------------------------------------------

  inline Conversation* New() const PROTOBUF_FINAL { return New(NULL); }

  Conversation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Conversation& from);
  void MergeFrom(const Conversation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Conversation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // .mars.stn.ConversationType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mars::stn::ConversationType type() const;
  void set_type(::mars::stn::ConversationType value);

  // @@protoc_insertion_point(class_scope:mars.stn.Conversation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_conversation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Conversation

// .mars.stn.ConversationType type = 1;
inline void Conversation::clear_type() {
  type_ = 0;
}
inline ::mars::stn::ConversationType Conversation::type() const {
  // @@protoc_insertion_point(field_get:mars.stn.Conversation.type)
  return static_cast< ::mars::stn::ConversationType >(type_);
}
inline void Conversation::set_type(::mars::stn::ConversationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.Conversation.type)
}

// string target = 2;
inline void Conversation::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conversation::target() const {
  // @@protoc_insertion_point(field_get:mars.stn.Conversation.target)
  return target_.GetNoArena();
}
inline void Conversation::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.Conversation.target)
}
#if LANG_CXX11
inline void Conversation::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.Conversation.target)
}
#endif
inline void Conversation::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.Conversation.target)
}
inline void Conversation::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.Conversation.target)
}
inline ::std::string* Conversation::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.Conversation.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conversation::release_target() {
  // @@protoc_insertion_point(field_release:mars.stn.Conversation.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conversation::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Conversation.target)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace stn
}  // namespace mars

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mars::stn::ConversationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mars::stn::ConversationType>() {
  return ::mars::stn::ConversationType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_conversation_2eproto__INCLUDED
