// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef PROTOBUF_group_2eproto__INCLUDED
#define PROTOBUF_group_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace mars {
namespace stn {
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
}  // namespace stn
}  // namespace mars

namespace mars {
namespace stn {

namespace protobuf_group_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_group_2eproto

enum GroupType {
  GroupType_Normal = 0,
  GroupType_Free = 1,
  GroupType_Restricted = 2,
  GroupType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GroupType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GroupType_IsValid(int value);
const GroupType GroupType_MIN = GroupType_Normal;
const GroupType GroupType_MAX = GroupType_Restricted;
const int GroupType_ARRAYSIZE = GroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GroupType_descriptor();
inline const ::std::string& GroupType_Name(GroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GroupType_descriptor(), value);
}
inline bool GroupType_Parse(
    const ::std::string& name, GroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GroupType>(
    GroupType_descriptor(), name, value);
}
// ===================================================================

class GroupInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mars.stn.GroupInfo) */ {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupInfo& default_instance();

  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GroupInfo* other);

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target_id = 1;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  const ::std::string& target_id() const;
  void set_target_id(const ::std::string& value);
  #if LANG_CXX11
  void set_target_id(::std::string&& value);
  #endif
  void set_target_id(const char* value);
  void set_target_id(const char* value, size_t size);
  ::std::string* mutable_target_id();
  ::std::string* release_target_id();
  void set_allocated_target_id(::std::string* target_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string portrait = 3;
  void clear_portrait();
  static const int kPortraitFieldNumber = 3;
  const ::std::string& portrait() const;
  void set_portrait(const ::std::string& value);
  #if LANG_CXX11
  void set_portrait(::std::string&& value);
  #endif
  void set_portrait(const char* value);
  void set_portrait(const char* value, size_t size);
  ::std::string* mutable_portrait();
  ::std::string* release_portrait();
  void set_allocated_portrait(::std::string* portrait);

  // string owner = 4;
  void clear_owner();
  static const int kOwnerFieldNumber = 4;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // bytes extra = 6;
  void clear_extra();
  static const int kExtraFieldNumber = 6;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const void* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // .mars.stn.GroupType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::mars::stn::GroupType type() const;
  void set_type(::mars::stn::GroupType value);

  // @@protoc_insertion_point(class_scope:mars.stn.GroupInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr portrait_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_group_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mars.stn.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Group* other);

  // implements Message ----------------------------------------------

  inline Group* New() const PROTOBUF_FINAL { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  const ::std::string& members(int index) const;
  ::std::string* mutable_members(int index);
  void set_members(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_members(int index, ::std::string&& value);
  #endif
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  ::std::string* add_members();
  void add_members(const ::std::string& value);
  #if LANG_CXX11
  void add_members(::std::string&& value);
  #endif
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();

  // .mars.stn.GroupInfo group_info = 1;
  bool has_group_info() const;
  void clear_group_info();
  static const int kGroupInfoFieldNumber = 1;
  const ::mars::stn::GroupInfo& group_info() const;
  ::mars::stn::GroupInfo* mutable_group_info();
  ::mars::stn::GroupInfo* release_group_info();
  void set_allocated_group_info(::mars::stn::GroupInfo* group_info);

  // @@protoc_insertion_point(class_scope:mars.stn.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  ::mars::stn::GroupInfo* group_info_;
  mutable int _cached_size_;
  friend struct protobuf_group_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupInfo

// string target_id = 1;
inline void GroupInfo::clear_target_id() {
  target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::target_id() const {
  // @@protoc_insertion_point(field_get:mars.stn.GroupInfo.target_id)
  return target_id_.GetNoArena();
}
inline void GroupInfo::set_target_id(const ::std::string& value) {
  
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.GroupInfo.target_id)
}
#if LANG_CXX11
inline void GroupInfo::set_target_id(::std::string&& value) {
  
  target_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.GroupInfo.target_id)
}
#endif
inline void GroupInfo::set_target_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.GroupInfo.target_id)
}
inline void GroupInfo::set_target_id(const char* value, size_t size) {
  
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.GroupInfo.target_id)
}
inline ::std::string* GroupInfo::mutable_target_id() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.GroupInfo.target_id)
  return target_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_target_id() {
  // @@protoc_insertion_point(field_release:mars.stn.GroupInfo.target_id)
  
  return target_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_target_id(::std::string* target_id) {
  if (target_id != NULL) {
    
  } else {
    
  }
  target_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_id);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.GroupInfo.target_id)
}

// string name = 2;
inline void GroupInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::name() const {
  // @@protoc_insertion_point(field_get:mars.stn.GroupInfo.name)
  return name_.GetNoArena();
}
inline void GroupInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.GroupInfo.name)
}
#if LANG_CXX11
inline void GroupInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.GroupInfo.name)
}
#endif
inline void GroupInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.GroupInfo.name)
}
inline void GroupInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.GroupInfo.name)
}
inline ::std::string* GroupInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.GroupInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_name() {
  // @@protoc_insertion_point(field_release:mars.stn.GroupInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.GroupInfo.name)
}

// string portrait = 3;
inline void GroupInfo::clear_portrait() {
  portrait_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::portrait() const {
  // @@protoc_insertion_point(field_get:mars.stn.GroupInfo.portrait)
  return portrait_.GetNoArena();
}
inline void GroupInfo::set_portrait(const ::std::string& value) {
  
  portrait_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.GroupInfo.portrait)
}
#if LANG_CXX11
inline void GroupInfo::set_portrait(::std::string&& value) {
  
  portrait_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.GroupInfo.portrait)
}
#endif
inline void GroupInfo::set_portrait(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portrait_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.GroupInfo.portrait)
}
inline void GroupInfo::set_portrait(const char* value, size_t size) {
  
  portrait_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.GroupInfo.portrait)
}
inline ::std::string* GroupInfo::mutable_portrait() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.GroupInfo.portrait)
  return portrait_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_portrait() {
  // @@protoc_insertion_point(field_release:mars.stn.GroupInfo.portrait)
  
  return portrait_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_portrait(::std::string* portrait) {
  if (portrait != NULL) {
    
  } else {
    
  }
  portrait_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portrait);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.GroupInfo.portrait)
}

// string owner = 4;
inline void GroupInfo::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::owner() const {
  // @@protoc_insertion_point(field_get:mars.stn.GroupInfo.owner)
  return owner_.GetNoArena();
}
inline void GroupInfo::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.GroupInfo.owner)
}
#if LANG_CXX11
inline void GroupInfo::set_owner(::std::string&& value) {
  
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.GroupInfo.owner)
}
#endif
inline void GroupInfo::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.GroupInfo.owner)
}
inline void GroupInfo::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.GroupInfo.owner)
}
inline ::std::string* GroupInfo::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.GroupInfo.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_owner() {
  // @@protoc_insertion_point(field_release:mars.stn.GroupInfo.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.GroupInfo.owner)
}

// .mars.stn.GroupType type = 5;
inline void GroupInfo::clear_type() {
  type_ = 0;
}
inline ::mars::stn::GroupType GroupInfo::type() const {
  // @@protoc_insertion_point(field_get:mars.stn.GroupInfo.type)
  return static_cast< ::mars::stn::GroupType >(type_);
}
inline void GroupInfo::set_type(::mars::stn::GroupType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.GroupInfo.type)
}

// bytes extra = 6;
inline void GroupInfo::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::extra() const {
  // @@protoc_insertion_point(field_get:mars.stn.GroupInfo.extra)
  return extra_.GetNoArena();
}
inline void GroupInfo::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.GroupInfo.extra)
}
#if LANG_CXX11
inline void GroupInfo::set_extra(::std::string&& value) {
  
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.GroupInfo.extra)
}
#endif
inline void GroupInfo::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.GroupInfo.extra)
}
inline void GroupInfo::set_extra(const void* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.GroupInfo.extra)
}
inline ::std::string* GroupInfo::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.GroupInfo.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_extra() {
  // @@protoc_insertion_point(field_release:mars.stn.GroupInfo.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.GroupInfo.extra)
}

// -------------------------------------------------------------------

// Group

// .mars.stn.GroupInfo group_info = 1;
inline bool Group::has_group_info() const {
  return this != internal_default_instance() && group_info_ != NULL;
}
inline void Group::clear_group_info() {
  if (GetArenaNoVirtual() == NULL && group_info_ != NULL) delete group_info_;
  group_info_ = NULL;
}
inline const ::mars::stn::GroupInfo& Group::group_info() const {
  // @@protoc_insertion_point(field_get:mars.stn.Group.group_info)
  return group_info_ != NULL ? *group_info_
                         : *::mars::stn::GroupInfo::internal_default_instance();
}
inline ::mars::stn::GroupInfo* Group::mutable_group_info() {
  
  if (group_info_ == NULL) {
    group_info_ = new ::mars::stn::GroupInfo;
  }
  // @@protoc_insertion_point(field_mutable:mars.stn.Group.group_info)
  return group_info_;
}
inline ::mars::stn::GroupInfo* Group::release_group_info() {
  // @@protoc_insertion_point(field_release:mars.stn.Group.group_info)
  
  ::mars::stn::GroupInfo* temp = group_info_;
  group_info_ = NULL;
  return temp;
}
inline void Group::set_allocated_group_info(::mars::stn::GroupInfo* group_info) {
  delete group_info_;
  group_info_ = group_info;
  if (group_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mars.stn.Group.group_info)
}

// repeated string members = 2;
inline int Group::members_size() const {
  return members_.size();
}
inline void Group::clear_members() {
  members_.Clear();
}
inline const ::std::string& Group::members(int index) const {
  // @@protoc_insertion_point(field_get:mars.stn.Group.members)
  return members_.Get(index);
}
inline ::std::string* Group::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:mars.stn.Group.members)
  return members_.Mutable(index);
}
inline void Group::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mars.stn.Group.members)
  members_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Group::set_members(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mars.stn.Group.members)
  members_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Group::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mars.stn.Group.members)
}
inline void Group::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mars.stn.Group.members)
}
inline ::std::string* Group::add_members() {
  // @@protoc_insertion_point(field_add_mutable:mars.stn.Group.members)
  return members_.Add();
}
inline void Group::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mars.stn.Group.members)
}
#if LANG_CXX11
inline void Group::add_members(::std::string&& value) {
  members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mars.stn.Group.members)
}
#endif
inline void Group::add_members(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mars.stn.Group.members)
}
inline void Group::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mars.stn.Group.members)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Group::members() const {
  // @@protoc_insertion_point(field_list:mars.stn.Group.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Group::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:mars.stn.Group.members)
  return &members_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace stn
}  // namespace mars

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mars::stn::GroupType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mars::stn::GroupType>() {
  return ::mars::stn::GroupType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_group_2eproto__INCLUDED
