// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_content.proto

#ifndef PROTOBUF_message_5fcontent_2eproto__INCLUDED
#define PROTOBUF_message_5fcontent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace mars {
namespace stn {
class MessageContent;
class MessageContentDefaultTypeInternal;
extern MessageContentDefaultTypeInternal _MessageContent_default_instance_;
}  // namespace stn
}  // namespace mars

namespace mars {
namespace stn {

namespace protobuf_message_5fcontent_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_5fcontent_2eproto

enum ContentType {
  Text = 0,
  Image = 1,
  Voice = 2,
  Location = 3,
  Video = 4,
  RichMedia = 5,
  Custom = 6,
  ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContentType_IsValid(int value);
const ContentType ContentType_MIN = Text;
const ContentType ContentType_MAX = Custom;
const int ContentType_ARRAYSIZE = ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContentType_descriptor();
inline const ::std::string& ContentType_Name(ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContentType_descriptor(), value);
}
inline bool ContentType_Parse(
    const ::std::string& name, ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContentType>(
    ContentType_descriptor(), name, value);
}
// ===================================================================

class MessageContent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mars.stn.MessageContent) */ {
 public:
  MessageContent();
  virtual ~MessageContent();

  MessageContent(const MessageContent& from);

  inline MessageContent& operator=(const MessageContent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageContent& default_instance();

  static inline const MessageContent* internal_default_instance() {
    return reinterpret_cast<const MessageContent*>(
               &_MessageContent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MessageContent* other);

  // implements Message ----------------------------------------------

  inline MessageContent* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageContent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageContent& from);
  void MergeFrom(const MessageContent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string searchable_content = 2;
  void clear_searchable_content();
  static const int kSearchableContentFieldNumber = 2;
  const ::std::string& searchable_content() const;
  void set_searchable_content(const ::std::string& value);
  #if LANG_CXX11
  void set_searchable_content(::std::string&& value);
  #endif
  void set_searchable_content(const char* value);
  void set_searchable_content(const char* value, size_t size);
  ::std::string* mutable_searchable_content();
  ::std::string* release_searchable_content();
  void set_allocated_searchable_content(::std::string* searchable_content);

  // string push_content = 3;
  void clear_push_content();
  static const int kPushContentFieldNumber = 3;
  const ::std::string& push_content() const;
  void set_push_content(const ::std::string& value);
  #if LANG_CXX11
  void set_push_content(::std::string&& value);
  #endif
  void set_push_content(const char* value);
  void set_push_content(const char* value, size_t size);
  ::std::string* mutable_push_content();
  ::std::string* release_push_content();
  void set_allocated_push_content(::std::string* push_content);

  // string content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string remoteMediaUrl = 7;
  void clear_remotemediaurl();
  static const int kRemoteMediaUrlFieldNumber = 7;
  const ::std::string& remotemediaurl() const;
  void set_remotemediaurl(const ::std::string& value);
  #if LANG_CXX11
  void set_remotemediaurl(::std::string&& value);
  #endif
  void set_remotemediaurl(const char* value);
  void set_remotemediaurl(const char* value, size_t size);
  ::std::string* mutable_remotemediaurl();
  ::std::string* release_remotemediaurl();
  void set_allocated_remotemediaurl(::std::string* remotemediaurl);

  // .mars.stn.ContentType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mars::stn::ContentType type() const;
  void set_type(::mars::stn::ContentType value);

  // int32 mediaType = 6;
  void clear_mediatype();
  static const int kMediaTypeFieldNumber = 6;
  ::google::protobuf::int32 mediatype() const;
  void set_mediatype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mars.stn.MessageContent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr searchable_content_;
  ::google::protobuf::internal::ArenaStringPtr push_content_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr remotemediaurl_;
  int type_;
  ::google::protobuf::int32 mediatype_;
  mutable int _cached_size_;
  friend struct protobuf_message_5fcontent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageContent

// .mars.stn.ContentType type = 1;
inline void MessageContent::clear_type() {
  type_ = 0;
}
inline ::mars::stn::ContentType MessageContent::type() const {
  // @@protoc_insertion_point(field_get:mars.stn.MessageContent.type)
  return static_cast< ::mars::stn::ContentType >(type_);
}
inline void MessageContent::set_type(::mars::stn::ContentType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.MessageContent.type)
}

// string searchable_content = 2;
inline void MessageContent::clear_searchable_content() {
  searchable_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContent::searchable_content() const {
  // @@protoc_insertion_point(field_get:mars.stn.MessageContent.searchable_content)
  return searchable_content_.GetNoArena();
}
inline void MessageContent::set_searchable_content(const ::std::string& value) {
  
  searchable_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.MessageContent.searchable_content)
}
#if LANG_CXX11
inline void MessageContent::set_searchable_content(::std::string&& value) {
  
  searchable_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.MessageContent.searchable_content)
}
#endif
inline void MessageContent::set_searchable_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  searchable_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.MessageContent.searchable_content)
}
inline void MessageContent::set_searchable_content(const char* value, size_t size) {
  
  searchable_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.MessageContent.searchable_content)
}
inline ::std::string* MessageContent::mutable_searchable_content() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.MessageContent.searchable_content)
  return searchable_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContent::release_searchable_content() {
  // @@protoc_insertion_point(field_release:mars.stn.MessageContent.searchable_content)
  
  return searchable_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContent::set_allocated_searchable_content(::std::string* searchable_content) {
  if (searchable_content != NULL) {
    
  } else {
    
  }
  searchable_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchable_content);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.MessageContent.searchable_content)
}

// string push_content = 3;
inline void MessageContent::clear_push_content() {
  push_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContent::push_content() const {
  // @@protoc_insertion_point(field_get:mars.stn.MessageContent.push_content)
  return push_content_.GetNoArena();
}
inline void MessageContent::set_push_content(const ::std::string& value) {
  
  push_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.MessageContent.push_content)
}
#if LANG_CXX11
inline void MessageContent::set_push_content(::std::string&& value) {
  
  push_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.MessageContent.push_content)
}
#endif
inline void MessageContent::set_push_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  push_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.MessageContent.push_content)
}
inline void MessageContent::set_push_content(const char* value, size_t size) {
  
  push_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.MessageContent.push_content)
}
inline ::std::string* MessageContent::mutable_push_content() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.MessageContent.push_content)
  return push_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContent::release_push_content() {
  // @@protoc_insertion_point(field_release:mars.stn.MessageContent.push_content)
  
  return push_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContent::set_allocated_push_content(::std::string* push_content) {
  if (push_content != NULL) {
    
  } else {
    
  }
  push_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_content);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.MessageContent.push_content)
}

// string content = 4;
inline void MessageContent::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContent::content() const {
  // @@protoc_insertion_point(field_get:mars.stn.MessageContent.content)
  return content_.GetNoArena();
}
inline void MessageContent::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.MessageContent.content)
}
#if LANG_CXX11
inline void MessageContent::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.MessageContent.content)
}
#endif
inline void MessageContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.MessageContent.content)
}
inline void MessageContent::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.MessageContent.content)
}
inline ::std::string* MessageContent::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.MessageContent.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContent::release_content() {
  // @@protoc_insertion_point(field_release:mars.stn.MessageContent.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.MessageContent.content)
}

// bytes data = 5;
inline void MessageContent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContent::data() const {
  // @@protoc_insertion_point(field_get:mars.stn.MessageContent.data)
  return data_.GetNoArena();
}
inline void MessageContent::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.MessageContent.data)
}
#if LANG_CXX11
inline void MessageContent::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.MessageContent.data)
}
#endif
inline void MessageContent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.MessageContent.data)
}
inline void MessageContent::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.MessageContent.data)
}
inline ::std::string* MessageContent::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.MessageContent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContent::release_data() {
  // @@protoc_insertion_point(field_release:mars.stn.MessageContent.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.MessageContent.data)
}

// int32 mediaType = 6;
inline void MessageContent::clear_mediatype() {
  mediatype_ = 0;
}
inline ::google::protobuf::int32 MessageContent::mediatype() const {
  // @@protoc_insertion_point(field_get:mars.stn.MessageContent.mediaType)
  return mediatype_;
}
inline void MessageContent::set_mediatype(::google::protobuf::int32 value) {
  
  mediatype_ = value;
  // @@protoc_insertion_point(field_set:mars.stn.MessageContent.mediaType)
}

// string remoteMediaUrl = 7;
inline void MessageContent::clear_remotemediaurl() {
  remotemediaurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContent::remotemediaurl() const {
  // @@protoc_insertion_point(field_get:mars.stn.MessageContent.remoteMediaUrl)
  return remotemediaurl_.GetNoArena();
}
inline void MessageContent::set_remotemediaurl(const ::std::string& value) {
  
  remotemediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mars.stn.MessageContent.remoteMediaUrl)
}
#if LANG_CXX11
inline void MessageContent::set_remotemediaurl(::std::string&& value) {
  
  remotemediaurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mars.stn.MessageContent.remoteMediaUrl)
}
#endif
inline void MessageContent::set_remotemediaurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remotemediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mars.stn.MessageContent.remoteMediaUrl)
}
inline void MessageContent::set_remotemediaurl(const char* value, size_t size) {
  
  remotemediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mars.stn.MessageContent.remoteMediaUrl)
}
inline ::std::string* MessageContent::mutable_remotemediaurl() {
  
  // @@protoc_insertion_point(field_mutable:mars.stn.MessageContent.remoteMediaUrl)
  return remotemediaurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContent::release_remotemediaurl() {
  // @@protoc_insertion_point(field_release:mars.stn.MessageContent.remoteMediaUrl)
  
  return remotemediaurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContent::set_allocated_remotemediaurl(::std::string* remotemediaurl) {
  if (remotemediaurl != NULL) {
    
  } else {
    
  }
  remotemediaurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remotemediaurl);
  // @@protoc_insertion_point(field_set_allocated:mars.stn.MessageContent.remoteMediaUrl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace stn
}  // namespace mars

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mars::stn::ContentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mars::stn::ContentType>() {
  return ::mars::stn::ContentType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fcontent_2eproto__INCLUDED
