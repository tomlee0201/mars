// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify_message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "NotifyMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - NotifyMessageRoot

@implementation NotifyMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - NotifyMessageRoot_FileDescriptor

static GPBFileDescriptor *NotifyMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PullType

GPBEnumDescriptor *PullType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PullNormal\000PullChatRoom\000PullGroup\000";
    static const int32_t values[] = {
        PullType_PullNormal,
        PullType_PullChatRoom,
        PullType_PullGroup,
    };
    static const char *extraTextFormatInfo = "\003\000\004\206\000\001\004\210\000\002\004\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PullType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PullType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PullType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PullType_PullNormal:
    case PullType_PullChatRoom:
    case PullType_PullGroup:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - NotifyMessage

@implementation NotifyMessage

@dynamic type;
@dynamic head;
@dynamic target;

typedef struct NotifyMessage__storage_ {
  uint32_t _has_storage_[1];
  PullType type;
  NSString *target;
  int64_t head;
} NotifyMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PullType_EnumDescriptor,
        .number = NotifyMessage_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyMessage__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "head",
        .dataTypeSpecific.className = NULL,
        .number = NotifyMessage_FieldNumber_Head,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyMessage__storage_, head),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = NULL,
        .number = NotifyMessage_FieldNumber_Target,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyMessage__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyMessage class]
                                     rootClass:[NotifyMessageRoot class]
                                          file:NotifyMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NotifyMessage_Type_RawValue(NotifyMessage *message) {
  GPBDescriptor *descriptor = [NotifyMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NotifyMessage_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetNotifyMessage_Type_RawValue(NotifyMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [NotifyMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NotifyMessage_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
