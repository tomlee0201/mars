// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Message.pbobjc.h"
 #import "Conversation.pbobjc.h"
 #import "MessageContent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageRoot

@implementation MessageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessageRoot_FileDescriptor

static GPBFileDescriptor *MessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Message

@implementation Message

@dynamic hasConversation, conversation;
@dynamic fromUser;
@dynamic hasContent, content;
@dynamic messageId;
@dynamic serverTimestamp;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  Conversation *conversation;
  NSString *fromUser;
  MessageContent *content;
  int64_t messageId;
  int64_t serverTimestamp;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversation",
        .dataTypeSpecific.className = GPBStringifySymbol(Conversation),
        .number = Message_FieldNumber_Conversation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, conversation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUser",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_FromUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, fromUser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(MessageContent),
        .number = Message_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_MessageId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Message__storage_, messageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serverTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_ServerTimestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Message__storage_, serverTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
