// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_content.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "MessageContent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageContentRoot

@implementation MessageContentRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessageContentRoot_FileDescriptor

static GPBFileDescriptor *MessageContentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"mars.stn"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ContentType

GPBEnumDescriptor *ContentType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Text\000Image\000Voice\000Location\000Video\000RichMedi"
        "a\000Custom\000";
    static const int32_t values[] = {
        ContentType_Text,
        ContentType_Image,
        ContentType_Voice,
        ContentType_Location,
        ContentType_Video,
        ContentType_RichMedia,
        ContentType_Custom,
    };
    static const char *extraTextFormatInfo = "\007\000\004\000\001\005\000\002\005\000\003\010\000\004\005\000\005\t\000\006\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ContentType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ContentType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ContentType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ContentType_Text:
    case ContentType_Image:
    case ContentType_Voice:
    case ContentType_Location:
    case ContentType_Video:
    case ContentType_RichMedia:
    case ContentType_Custom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MessageContent

@implementation MessageContent

@dynamic type;
@dynamic searchableContent;
@dynamic pushContent;
@dynamic data_p;

typedef struct MessageContent__storage_ {
  uint32_t _has_storage_[1];
  ContentType type;
  NSString *searchableContent;
  NSString *pushContent;
  NSData *data_p;
} MessageContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ContentType_EnumDescriptor,
        .number = MessageContent_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageContent__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "searchableContent",
        .dataTypeSpecific.className = NULL,
        .number = MessageContent_FieldNumber_SearchableContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageContent__storage_, searchableContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushContent",
        .dataTypeSpecific.className = NULL,
        .number = MessageContent_FieldNumber_PushContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessageContent__storage_, pushContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = MessageContent_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessageContent__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageContent class]
                                     rootClass:[MessageContentRoot class]
                                          file:MessageContentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageContent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MessageContent_Type_RawValue(MessageContent *message) {
  GPBDescriptor *descriptor = [MessageContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessageContent_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetMessageContent_Type_RawValue(MessageContent *message, int32_t value) {
  GPBDescriptor *descriptor = [MessageContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessageContent_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
